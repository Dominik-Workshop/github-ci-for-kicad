name: KiCad CI

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  contents: write  # Ensure write access for the repository contents

jobs:
  # Job to install KiCad once and set up the environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      base_name: ${{ steps.find_files.outputs.base_name }}
      root_schematic_file: ${{ steps.find_files.outputs.root_schematic_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Find schematic and project files
        id: find_files
        run: |
          # Find the .pro project file
          project_file=$(find . -type f -name "*.kicad_pro" | head -n 1)
      
          if [ -z "$project_file" ]; then
            echo "No project file found!"
            exit 1
          fi
      
          # Extract the project name from the .pro file (remove the extension)
          base_name=$(basename "$project_file" .kicad_pro)
      
          echo "Found project file: $project_file"
          echo "Extracted project name: $base_name"
      
          # Find the corresponding schematic file based on the project name
          root_schematic_file="./${base_name}.kicad_sch"
          
          if [ ! -f "$root_schematic_file" ]; then
            echo "Schematic file $root_schematic_file does not exist!"
            exit 1
          fi
      
          echo "Found root schematic file: $root_schematic_file"
      
          # Set environment variables to pass to other jobs
          echo "base_name=$base_name" >> $GITHUB_ENV
          echo "root_schematic_file=$root_schematic_file" >> $GITHUB_ENV

      - name: Install KiCad V8.0.0
        run: |
          # Add KiCad repository for the correct version
          sudo add-apt-repository ppa:kicad/kicad-8.0-releases -y
          sudo apt update
          sudo apt install -y kicad

  # Job to generate schematic PDF (depends on the setup job)
  generate-pdf:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Generate schematic PDF
        run: |
          # Ensure the 'doc' directory exists
          mkdir -p doc
          
          # Generate the schematic PDF with the project name dynamically inserted
          kicad-cli sch export pdf --output "doc/${{ env.base_name }}-schematic.pdf" ${{ env.root_schematic_file }}
      
          # Check if the PDF was generated successfully
          if [ ! -f "doc/${{ env.base_name }}-schematic.pdf" ]; then
            echo "Error: schematic PDF was not generated."
            exit 1
          fi
          echo "Schematic PDF generated successfully."

      - name: Configure Git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Commit and push the generated PDF
        run: |
          git add "doc/${{ env.base_name }}-schematic.pdf"
          git commit -m "Add generated schematic PDF"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}

  # Job to generate Gerbers (depends on the setup job)
  generate-gerbers:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Generate Gerbers
        run: |
          # Ensure the 'gerbers' directory exists
          mkdir -p gerbers
          
          # Use KiCad CLI to generate Gerbers
          kicad-cli pcb export gerber --output gerbers/$base_name

          # Check if the Gerber files were generated
          if [ ! -d "gerbers/$base_name" ]; then
            echo "Error: Gerber files were not generated."
            exit 1
          fi
          echo "Gerber files generated successfully."

      - name: Commit and push Gerber files
        run: |
          git add "gerbers/$base_name/*"
          git commit -m "Add generated Gerber files"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
