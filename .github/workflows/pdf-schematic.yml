name: KiCad CI

on:
  workflow_dispatch:  # Manually trigger the workflow
  push:
    branches:
      - master  # Trigger on push to master branch
      - main    # Trigger on push to main branch
  pull_request:
    branches:
      - master  # Trigger on pull requests targeting master branch
      - main    # Trigger on pull requests targeting main branch

permissions:
  contents: write  # Ensure write access for the repository contents

jobs:
  # Job to validate files
  validate:
    runs-on: ubuntu-latest
    outputs:
      base_name: ${{ steps.find_files.outputs.base_name }}
      project_file: ${{ steps.find_files.outputs.project_file }}
      schematic_file: ${{ steps.find_files.outputs.schematic_file }}
      pcb_file: ${{ steps.find_files.outputs.pcb_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Find project, schematic, and PCB files
        id: find_files
        run: |
          # Find the .pro project file
          project_file=$(find . -type f -name "*.kicad_pro" | head -n 1)
      
          if [ -z "$project_file" ]; then
            echo "No project file found!"
            exit 1
          fi
      
          # Extract the project name from the .pro file (remove the extension)
          base_name=$(basename "$project_file" .kicad_pro)
      
          # Find the corresponding schematic and PCB files based on the project name
          schematic_file="./${base_name}.kicad_sch"
          pcb_file="./${base_name}.kicad_pcb"
          
          if [ ! -f "$schematic_file" ]; then
            echo "Schematic file $schematic_file does not exist!"
            exit 1
          fi
      
          if [ ! -f "$pcb_file" ]; then
            echo "PCB file $pcb_file does not exist!"
            exit 1
          fi
      
          echo "Found project file: $project_file"
          echo "Found schematic file: $schematic_file"
          echo "Found PCB file: $pcb_file"
      
          # Set environment variables to pass to other jobs
          echo "base_name=$base_name" >> $GITHUB_ENV
          echo "project_file=$project_file" >> $GITHUB_ENV
          echo "schematic_file=$schematic_file" >> $GITHUB_ENV
          echo "pcb_file=$pcb_file" >> $GITHUB_ENV

  # Job to generate schematic PDF and Gerbers (depends on validate job)
  deploy:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Install KiCad V8.0.0 (Ensure kicad-cli availability)
        run: |
          sudo add-apt-repository ppa:kicad/kicad-8.0-releases -y
          sudo apt update
          sudo apt install -y kicad

          # Ensure kicad-cli is available in the PATH
          if ! command -v kicad-cli &> /dev/null; then
            echo "Error: kicad-cli command not found!"
            exit 1
          fi
          echo "kicad-cli is available."

      - name: Generate schematic PDF
        run: |
          # Ensure the 'doc' directory exists
          mkdir -p doc
          
          # Generate the schematic PDF with the project name dynamically inserted
          kicad-cli sch export pdf --output "doc/${{ env.base_name }}-schematic.pdf" ${{ env.schematic_file }}
      
          # Check if the PDF was generated successfully
          if [ ! -f "doc/${{ env.base_name }}-schematic.pdf" ]; then
            echo "Error: schematic PDF was not generated."
            exit 1
          fi
          echo "Schematic PDF generated successfully."

      - name: Generate Gerber files
        run: |
          # Ensure the 'fab' directory exists
          mkdir -p fab

          # Generate the Gerber files
          kicad-cli pcb export gerbers --no-protel-ext -o fab/ ${{ env.pcb_file }}
          kicad-cli pcb export drill --format gerber --excellon-separate-th -o fab/ ${{ env.pcb_file }}
      
          # Check if the Gerber files were generated successfully
          if [ ! -d "fab/${{ env.base_name }}" ]; then
            echo "Error: Gerber files were not generated."
            exit 1
          fi
          echo "Gerber files generated successfully."

      - name: Configure Git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Commit and push the generated files
        run: |
          # Add the newly generated PDF and Gerber files to Git
          git add "doc/${{ env.base_name }}-schematic.pdf"
          git add "fab/*"
          
          # Commit if files were added
          git commit -m "Add generated schematic PDF and Gerber files"
          
          # Push the commit
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
